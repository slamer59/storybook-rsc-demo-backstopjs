import type { Config, Scenario } from 'backstopjs';
import backstop from 'backstopjs';
import { readFileSync } from 'node:fs';
import type { StoryJSON } from './visual-regression-config.js';
import { config, constructScenarios } from './visual-regression-config.js';

const [, , backstopExecutionMode] = process.argv;

async function main(backstopExecutionMode: string) {
    const { action, label, location } = getAction(backstopExecutionMode);
    console.log(`task: '${action}' with location: '${location}'`);

    // Read the stories.json file generated by Storybook
    let storyJSON: StoryJSON;
    try {
        // Try to read from storybook-static first (if built)
        let storiesContent: string;
        try {
            storiesContent = readFileSync('./storybook-static/stories.json', 'utf-8');
        } catch {
            // Fallback: try to fetch from running Storybook instance
            const response = await fetch(`${location}/index.json`);
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
            storiesContent = await response.text();
        }
        storyJSON = JSON.parse(storiesContent);
    } catch (error) {
        console.error('Error reading stories.json. Make sure either:');
        console.error('1. Storybook is running with: npm run storybook');
        console.error('2. Or build Storybook first with: npm run build-storybook');
        console.error('Error details:', error);
        process.exit(1);
    }

    const scenarios = constructScenarios(storyJSON, location);
    console.log(
        'scenarios',
        scenarios.map(({ label, url, selectors }) => ({ label, url, selectors }))
    );

    const backstopConfig = constructBackstopConfig(scenarios);
    console.log('backstop config', backstopConfig);

    // Export the generated config to a file for debugging/tracing
    const configExportPath = './backstop.json';
    try {
        const fs = await import('node:fs/promises');
        await fs.writeFile(configExportPath, JSON.stringify(backstopConfig, null, 2));
        console.log(`Generated config exported to: ${configExportPath}`);
    } catch (error) {
        console.warn('Failed to export config:', error);
    }

    backstop(action, {
        config: backstopConfig,
    })
        .then(() => {
            console.log(`${label} completed`);
        })
        .catch(err => {
            console.log(`${label} failed, because: `, err);
            process.exit(1);
        });
}

function constructBackstopConfig(scenarios: Scenario[]): Config {
    const { base: engine_scripts, ...scripts } = config.backstopCapture.scripts;
    return {
        ...config.backstopCapture.browser,
        ...scripts,
        id: config.backstopCapture.id,
        viewports: config.backstopCapture.viewPorts,
        paths: {
            ...config.backstopCapture.locations,
            engine_scripts,
        },
        scenarios,
        report: ['browser'],
    };
}

function getAction(mode: string) {
    switch (mode) {
        case 'reference':
            return {
                action: 'reference' as const,
                label: 'referencing',
                location: `http://localhost:${config.buildProcess.locations.referenceServePort}`,
            };
        default:
            return {
                action: 'test' as const,
                label: 'testing',
                location: `http://localhost:${config.buildProcess.locations.changedServePort}`,
            };
    }
}

// Only run if this file is executed directly
main(backstopExecutionMode);
